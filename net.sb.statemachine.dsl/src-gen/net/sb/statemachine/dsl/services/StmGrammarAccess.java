/*
* generated by Xtext
*/
package net.sb.statemachine.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StmGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatemachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_2_0 = (RuleCall)cEventsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCommandsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGuardsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGuardsGuardParserRuleCall_8_0 = (RuleCall)cGuardsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStatesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatesStateParserRuleCall_10_0 = (RuleCall)cStatesAssignment_10.eContents().get(0);
		
		////	('action' (actions+=Action)* 'end')?
		////	('actionMap' (actionMaps+=ActionMap)* 'end')?
		//Statemachine:
		//	{Statemachine} "events" events+=Event* "end" "commands" commands+=Command* "end" "guard" guards+=Guard* "end"
		//	states+=State*;
		public ParserRule getRule() { return rule; }

		//{Statemachine} "events" events+=Event* "end" "commands" commands+=Command* "end" "guard" guards+=Guard* "end"
		//states+=State*
		public Group getGroup() { return cGroup; }

		//{Statemachine}
		public Action getStatemachineAction_0() { return cStatemachineAction_0; }

		//"events"
		public Keyword getEventsKeyword_1() { return cEventsKeyword_1; }

		//events+=Event*
		public Assignment getEventsAssignment_2() { return cEventsAssignment_2; }

		//Event
		public RuleCall getEventsEventParserRuleCall_2_0() { return cEventsEventParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//"commands"
		public Keyword getCommandsKeyword_4() { return cCommandsKeyword_4; }

		//commands+=Command*
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_5_0() { return cCommandsCommandParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"guard"
		public Keyword getGuardKeyword_7() { return cGuardKeyword_7; }

		//guards+=Guard*
		public Assignment getGuardsAssignment_8() { return cGuardsAssignment_8; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_8_0() { return cGuardsGuardParserRuleCall_8_0; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }

		//states+=State*
		public Assignment getStatesAssignment_10() { return cStatesAssignment_10; }

		//State
		public RuleCall getStatesStateParserRuleCall_10_0() { return cStatesStateParserRuleCall_10_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Command:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEntryActionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEntryActionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cEntryActionsCommandCrossReference_2_2_0 = (CrossReference)cEntryActionsAssignment_2_2.eContents().get(0);
		private final RuleCall cEntryActionsCommandIDTerminalRuleCall_2_2_0_1 = (RuleCall)cEntryActionsCommandCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDoActionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDoActionCommandCrossReference_3_1_0 = (CrossReference)cDoActionAssignment_3_1.eContents().get(0);
		private final RuleCall cDoActionCommandIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDoActionCommandCrossReference_3_1_0.eContents().get(1);
		private final Assignment cStopActionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cStopActionCommandCrossReference_3_2_0 = (CrossReference)cStopActionAssignment_3_2.eContents().get(0);
		private final RuleCall cStopActionCommandIDTerminalRuleCall_3_2_0_1 = (RuleCall)cStopActionCommandCrossReference_3_2_0.eContents().get(1);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Assignment cSelfEventsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSelfEventsSelfEventParserRuleCall_5_0 = (RuleCall)cSelfEventsAssignment_5.eContents().get(0);
		private final Assignment cTransitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionsTransitionParserRuleCall_6_0 = (RuleCall)cTransitionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cExitActionsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cExitActionsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cExitActionsCommandCrossReference_7_2_0 = (CrossReference)cExitActionsAssignment_7_2.eContents().get(0);
		private final RuleCall cExitActionsCommandIDTerminalRuleCall_7_2_0_1 = (RuleCall)cExitActionsCommandCrossReference_7_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////Action:
		////	name=ID
		////	('iconResourceName' iconResourceName=STRING)?
		////	('shortDescription' shortDescription=STRING)?
		////	;
		////
		////ActionMap:
		////	action=[Action] keyStroke=STRING;
		////
		////PopupMenu:
		////	action=[Action] (toolTip=STRING)?;
		////
		//State:
		//	"state" name=ID ("entryActions" "{" entryActions+=[Command]+ "}")? ("do" doAction=[Command] stopAction=[Command])?
		//	states+=State* selfEvents+=SelfEvent* transitions+=Transition* ("exitActions" "{" exitActions+=[Command]+ "}")? //	('popupMenu' '{' (popupMenu+=PopupMenu)+ '}')?
		//	//	('tip' tip=STRING)?
		//	//	('actions' '{' (actions+=ActionEnabler)+ '}')?
		//	"end";
		public ParserRule getRule() { return rule; }

		//"state" name=ID ("entryActions" "{" entryActions+=[Command]+ "}")? ("do" doAction=[Command] stopAction=[Command])?
		//states+=State* selfEvents+=SelfEvent* transitions+=Transition* ("exitActions" "{" exitActions+=[Command]+ "}")? //	('popupMenu' '{' (popupMenu+=PopupMenu)+ '}')?
		////	('tip' tip=STRING)?
		////	('actions' '{' (actions+=ActionEnabler)+ '}')?
		//"end"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("entryActions" "{" entryActions+=[Command]+ "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"entryActions"
		public Keyword getEntryActionsKeyword_2_0() { return cEntryActionsKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//entryActions+=[Command]+
		public Assignment getEntryActionsAssignment_2_2() { return cEntryActionsAssignment_2_2; }

		//[Command]
		public CrossReference getEntryActionsCommandCrossReference_2_2_0() { return cEntryActionsCommandCrossReference_2_2_0; }

		//ID
		public RuleCall getEntryActionsCommandIDTerminalRuleCall_2_2_0_1() { return cEntryActionsCommandIDTerminalRuleCall_2_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//("do" doAction=[Command] stopAction=[Command])?
		public Group getGroup_3() { return cGroup_3; }

		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }

		//doAction=[Command]
		public Assignment getDoActionAssignment_3_1() { return cDoActionAssignment_3_1; }

		//[Command]
		public CrossReference getDoActionCommandCrossReference_3_1_0() { return cDoActionCommandCrossReference_3_1_0; }

		//ID
		public RuleCall getDoActionCommandIDTerminalRuleCall_3_1_0_1() { return cDoActionCommandIDTerminalRuleCall_3_1_0_1; }

		//stopAction=[Command]
		public Assignment getStopActionAssignment_3_2() { return cStopActionAssignment_3_2; }

		//[Command]
		public CrossReference getStopActionCommandCrossReference_3_2_0() { return cStopActionCommandCrossReference_3_2_0; }

		//ID
		public RuleCall getStopActionCommandIDTerminalRuleCall_3_2_0_1() { return cStopActionCommandIDTerminalRuleCall_3_2_0_1; }

		//states+=State*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }

		//State
		public RuleCall getStatesStateParserRuleCall_4_0() { return cStatesStateParserRuleCall_4_0; }

		//selfEvents+=SelfEvent*
		public Assignment getSelfEventsAssignment_5() { return cSelfEventsAssignment_5; }

		//SelfEvent
		public RuleCall getSelfEventsSelfEventParserRuleCall_5_0() { return cSelfEventsSelfEventParserRuleCall_5_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_6() { return cTransitionsAssignment_6; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_6_0() { return cTransitionsTransitionParserRuleCall_6_0; }

		//("exitActions" "{" exitActions+=[Command]+ "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"exitActions"
		public Keyword getExitActionsKeyword_7_0() { return cExitActionsKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//exitActions+=[Command]+
		public Assignment getExitActionsAssignment_7_2() { return cExitActionsAssignment_7_2; }

		//[Command]
		public CrossReference getExitActionsCommandCrossReference_7_2_0() { return cExitActionsCommandCrossReference_7_2_0; }

		//ID
		public RuleCall getExitActionsCommandIDTerminalRuleCall_7_2_0_1() { return cExitActionsCommandIDTerminalRuleCall_7_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		////	('popupMenu' '{' (popupMenu+=PopupMenu)+ '}')?
		////	('tip' tip=STRING)?
		////	('actions' '{' (actions+=ActionEnabler)+ '}')?
		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardGuardCallParserRuleCall_1_1_0 = (RuleCall)cGuardAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStateStateCrossReference_3_0 = (CrossReference)cStateAssignment_3.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStateStateCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cActionCommandCrossReference_4_1_0 = (CrossReference)cActionAssignment_4_1.eContents().get(0);
		private final RuleCall cActionCommandIDTerminalRuleCall_4_1_0_1 = (RuleCall)cActionCommandCrossReference_4_1_0.eContents().get(1);
		
		////ActionEnabler:
		////	action=[Action] ( '[' guard=GuardCall ']') ?;
		//Transition:
		//	event=[Event] ("[" guard=GuardCall "]")? "=>" state=[State] ("/" action=[Command])?;
		public ParserRule getRule() { return rule; }

		//event=[Event] ("[" guard=GuardCall "]")? "=>" state=[State] ("/" action=[Command])?
		public Group getGroup() { return cGroup; }

		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }

		//("[" guard=GuardCall "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//guard=GuardCall
		public Assignment getGuardAssignment_1_1() { return cGuardAssignment_1_1; }

		//GuardCall
		public RuleCall getGuardGuardCallParserRuleCall_1_1_0() { return cGuardGuardCallParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//state=[State]
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }

		//[State]
		public CrossReference getStateStateCrossReference_3_0() { return cStateStateCrossReference_3_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_3_0_1() { return cStateStateIDTerminalRuleCall_3_0_1; }

		//("/" action=[Command])?
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//action=[Command]
		public Assignment getActionAssignment_4_1() { return cActionAssignment_4_1; }

		//[Command]
		public CrossReference getActionCommandCrossReference_4_1_0() { return cActionCommandCrossReference_4_1_0; }

		//ID
		public RuleCall getActionCommandIDTerminalRuleCall_4_1_0_1() { return cActionCommandIDTerminalRuleCall_4_1_0_1; }
	}

	public class SelfEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardGuardCallParserRuleCall_1_1_0 = (RuleCall)cGuardAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActionCommandCrossReference_3_0 = (CrossReference)cActionAssignment_3.eContents().get(0);
		private final RuleCall cActionCommandIDTerminalRuleCall_3_0_1 = (RuleCall)cActionCommandCrossReference_3_0.eContents().get(1);
		
		//SelfEvent:
		//	event=[Event] ("[" guard=GuardCall "]")? "/" action=[Command];
		public ParserRule getRule() { return rule; }

		//event=[Event] ("[" guard=GuardCall "]")? "/" action=[Command]
		public Group getGroup() { return cGroup; }

		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }

		//("[" guard=GuardCall "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//guard=GuardCall
		public Assignment getGuardAssignment_1_1() { return cGuardAssignment_1_1; }

		//GuardCall
		public RuleCall getGuardGuardCallParserRuleCall_1_1_0() { return cGuardGuardCallParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//action=[Command]
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//[Command]
		public CrossReference getActionCommandCrossReference_3_0() { return cActionCommandCrossReference_3_0; }

		//ID
		public RuleCall getActionCommandIDTerminalRuleCall_3_0_1() { return cActionCommandIDTerminalRuleCall_3_0_1; }
	}

	public class GuardCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGuardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cGuardGuardCrossReference_0_0 = (CrossReference)cGuardAssignment_0.eContents().get(0);
		private final RuleCall cGuardGuardIDTerminalRuleCall_0_0_1 = (RuleCall)cGuardGuardCrossReference_0_0.eContents().get(1);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		
		//GuardCall:
		//	guard=[Guard] parameters+=ID?;
		public ParserRule getRule() { return rule; }

		//guard=[Guard] parameters+=ID?
		public Group getGroup() { return cGroup; }

		//guard=[Guard]
		public Assignment getGuardAssignment_0() { return cGuardAssignment_0; }

		//[Guard]
		public CrossReference getGuardGuardCrossReference_0_0() { return cGuardGuardCrossReference_0_0; }

		//ID
		public RuleCall getGuardGuardIDTerminalRuleCall_0_0_1() { return cGuardGuardIDTerminalRuleCall_0_0_1; }

		//parameters+=ID?
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//ID
		public RuleCall getParametersIDTerminalRuleCall_1_0() { return cParametersIDTerminalRuleCall_1_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Guard:
		//	name=ID ("[" parameters+=Parameter "]")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("[" parameters+=Parameter "]")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("[" parameters+=Parameter "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ID ":" type=ID;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ID
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
	}
	
	
	private StatemachineElements pStatemachine;
	private EventElements pEvent;
	private CommandElements pCommand;
	private StateElements pState;
	private TransitionElements pTransition;
	private SelfEventElements pSelfEvent;
	private GuardCallElements pGuardCall;
	private GuardElements pGuard;
	private ParameterElements pParameter;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StmGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.sb.statemachine.dsl.Stm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////	('action' (actions+=Action)* 'end')?
	////	('actionMap' (actionMaps+=ActionMap)* 'end')?
	//Statemachine:
	//	{Statemachine} "events" events+=Event* "end" "commands" commands+=Command* "end" "guard" guards+=Guard* "end"
	//	states+=State*;
	public StatemachineElements getStatemachineAccess() {
		return (pStatemachine != null) ? pStatemachine : (pStatemachine = new StatemachineElements());
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}

	//Event:
	//	name=ID;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Command:
	//	name=ID;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	////Action:
	////	name=ID
	////	('iconResourceName' iconResourceName=STRING)?
	////	('shortDescription' shortDescription=STRING)?
	////	;
	////
	////ActionMap:
	////	action=[Action] keyStroke=STRING;
	////
	////PopupMenu:
	////	action=[Action] (toolTip=STRING)?;
	////
	//State:
	//	"state" name=ID ("entryActions" "{" entryActions+=[Command]+ "}")? ("do" doAction=[Command] stopAction=[Command])?
	//	states+=State* selfEvents+=SelfEvent* transitions+=Transition* ("exitActions" "{" exitActions+=[Command]+ "}")? //	('popupMenu' '{' (popupMenu+=PopupMenu)+ '}')?
	//	//	('tip' tip=STRING)?
	//	//	('actions' '{' (actions+=ActionEnabler)+ '}')?
	//	"end";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	////ActionEnabler:
	////	action=[Action] ( '[' guard=GuardCall ']') ?;
	//Transition:
	//	event=[Event] ("[" guard=GuardCall "]")? "=>" state=[State] ("/" action=[Command])?;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//SelfEvent:
	//	event=[Event] ("[" guard=GuardCall "]")? "/" action=[Command];
	public SelfEventElements getSelfEventAccess() {
		return (pSelfEvent != null) ? pSelfEvent : (pSelfEvent = new SelfEventElements());
	}
	
	public ParserRule getSelfEventRule() {
		return getSelfEventAccess().getRule();
	}

	//GuardCall:
	//	guard=[Guard] parameters+=ID?;
	public GuardCallElements getGuardCallAccess() {
		return (pGuardCall != null) ? pGuardCall : (pGuardCall = new GuardCallElements());
	}
	
	public ParserRule getGuardCallRule() {
		return getGuardCallAccess().getRule();
	}

	//Guard:
	//	name=ID ("[" parameters+=Parameter "]")?;
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Parameter:
	//	name=ID ":" type=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
