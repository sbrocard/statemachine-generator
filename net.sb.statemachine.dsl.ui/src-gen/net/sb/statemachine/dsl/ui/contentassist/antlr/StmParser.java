/*
* generated by Xtext
*/
package net.sb.statemachine.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.sb.statemachine.dsl.services.StmGrammarAccess;

public class StmParser extends AbstractContentAssistParser {
	
	@Inject
	private StmGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.sb.statemachine.dsl.ui.contentassist.antlr.internal.InternalStmParser createParser() {
		net.sb.statemachine.dsl.ui.contentassist.antlr.internal.InternalStmParser result = new net.sb.statemachine.dsl.ui.contentassist.antlr.internal.InternalStmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatemachineAccess().getGroup(), "rule__Statemachine__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getStateAccess().getGroup_7(), "rule__State__Group_7__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
					put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
					put(grammarAccess.getSelfEventAccess().getGroup(), "rule__SelfEvent__Group__0");
					put(grammarAccess.getSelfEventAccess().getGroup_1(), "rule__SelfEvent__Group_1__0");
					put(grammarAccess.getGuardCallAccess().getGroup(), "rule__GuardCall__Group__0");
					put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
					put(grammarAccess.getGuardAccess().getGroup_1(), "rule__Guard__Group_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getStatemachineAccess().getEventsAssignment_2(), "rule__Statemachine__EventsAssignment_2");
					put(grammarAccess.getStatemachineAccess().getCommandsAssignment_5(), "rule__Statemachine__CommandsAssignment_5");
					put(grammarAccess.getStatemachineAccess().getGuardsAssignment_8(), "rule__Statemachine__GuardsAssignment_8");
					put(grammarAccess.getStatemachineAccess().getStatesAssignment_10(), "rule__Statemachine__StatesAssignment_10");
					put(grammarAccess.getEventAccess().getNameAssignment(), "rule__Event__NameAssignment");
					put(grammarAccess.getCommandAccess().getNameAssignment(), "rule__Command__NameAssignment");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getEntryActionsAssignment_2_2(), "rule__State__EntryActionsAssignment_2_2");
					put(grammarAccess.getStateAccess().getDoActionAssignment_3_1(), "rule__State__DoActionAssignment_3_1");
					put(grammarAccess.getStateAccess().getStopActionAssignment_3_2(), "rule__State__StopActionAssignment_3_2");
					put(grammarAccess.getStateAccess().getStatesAssignment_4(), "rule__State__StatesAssignment_4");
					put(grammarAccess.getStateAccess().getSelfEventsAssignment_5(), "rule__State__SelfEventsAssignment_5");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_6(), "rule__State__TransitionsAssignment_6");
					put(grammarAccess.getStateAccess().getExitActionsAssignment_7_2(), "rule__State__ExitActionsAssignment_7_2");
					put(grammarAccess.getTransitionAccess().getEventAssignment_0(), "rule__Transition__EventAssignment_0");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_1_1(), "rule__Transition__GuardAssignment_1_1");
					put(grammarAccess.getTransitionAccess().getStateAssignment_3(), "rule__Transition__StateAssignment_3");
					put(grammarAccess.getTransitionAccess().getActionAssignment_4_1(), "rule__Transition__ActionAssignment_4_1");
					put(grammarAccess.getSelfEventAccess().getEventAssignment_0(), "rule__SelfEvent__EventAssignment_0");
					put(grammarAccess.getSelfEventAccess().getGuardAssignment_1_1(), "rule__SelfEvent__GuardAssignment_1_1");
					put(grammarAccess.getSelfEventAccess().getActionAssignment_3(), "rule__SelfEvent__ActionAssignment_3");
					put(grammarAccess.getGuardCallAccess().getGuardAssignment_0(), "rule__GuardCall__GuardAssignment_0");
					put(grammarAccess.getGuardCallAccess().getParametersAssignment_1(), "rule__GuardCall__ParametersAssignment_1");
					put(grammarAccess.getGuardAccess().getNameAssignment_0(), "rule__Guard__NameAssignment_0");
					put(grammarAccess.getGuardAccess().getParametersAssignment_1_1(), "rule__Guard__ParametersAssignment_1_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.sb.statemachine.dsl.ui.contentassist.antlr.internal.InternalStmParser typedParser = (net.sb.statemachine.dsl.ui.contentassist.antlr.internal.InternalStmParser) parser;
			typedParser.entryRuleStatemachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
